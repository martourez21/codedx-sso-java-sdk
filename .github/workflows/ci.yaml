name: Maven CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install Maven
        run: sudo apt-get update && sudo apt-get install -y maven

      - name: Build with Maven (skip tests)
        run: mvn -B clean package -DskipTests -Dmaven.test.skip=true --file pom.xml

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: target/*.jar

  generate-docs:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install Maven
        run: sudo apt-get update && sudo apt-get install -y maven

      - name: Generate Javadocs
        run: mvn javadoc:javadoc

      - name: List generated docs directory
        run: ls -la target/site/apidocs/ || echo "Javadocs directory not found"

      - name: Upload Javadocs
        uses: actions/upload-artifact@v4
        with:
          name: javadocs
          path: target/site/apidocs/
          retention-days: 1

  deploy-docs:
    runs-on: ubuntu-latest
    needs: generate-docs
    if: github.event_name != 'pull_request'

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Download Javadocs
        uses: actions/download-artifact@v4
        with:
          name: javadocs
          path: _site

      - name: List downloaded docs
        run: ls -la _site/ || echo "Downloaded artifacts directory not found"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-package:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github
          server-username: ${{ github.actor }}
          server-password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Maven
        run: sudo apt-get update && sudo apt-get install -y maven

      - name: Configure Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.GITHUB_TOKEN }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      - name: Read version from pom.xml
        id: version
        uses: notiz-dev/github-action-json-property@main
        with:
          path: pom.xml
          prop_path: project.version

      - name: Check if version exists
        run: |
          VERSION="${{ steps.version.outputs.prop }}"
          # Check if package version already exists
          if curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://maven.pkg.github.com/martourez21/codedx-sso-java-sdk/com/codedstreams/codedx-sso-java-sdk/$VERSION/" | grep -q "not found"; then
            echo "Version $VERSION does not exist, proceeding with deploy"
            echo "DEPLOY_NEEDED=true" >> $GITHUB_ENV
          else
            echo "Version $VERSION already exists, skipping deploy"
            echo "DEPLOY_NEEDED=false" >> $GITHUB_ENV
          fi

      - name: Deploy package
        if: env.DEPLOY_NEEDED == 'true'
        run: mvn -B deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}